local commands = require("LYRD.layers.commands")
local icons = require("LYRD.layers.icons")

local L = {
	name = "LYRD Commands",
	vscode_compatible = true,
	cmd = {
		LYRDAIAssistant = Command:new("AI Assistant", nil, icons.other.ia, true),
		LYRDAIAsk = Command:new("Ask AI", nil, icons.other.ia, true),
		LYRDAIEdit = Command:new("Edit with AI", nil, icons.other.ia, true),
		LYRDBreakLine = Command:new(
			"Break current line",
			":s/[,(]/&\r/ge|:noh|:'[,']normal==",
			icons.action.break_line
		),
		LYRDBufferClose = Command:new("Close buffer", ":bd", icons.action.close),
		LYRDBufferCloseAll = Command:new("Close all buffers", ":bufdo bd", icons.action.close_many),
		LYRDBufferCopy = Command:new("Copy whole buffer to clipboard", ':normal! ggVG"+y``', icons.action.copy),
		LYRDBufferForceClose = Command:new("Force close buffer", ":bd!", icons.action.kill),
		LYRDBufferForceCloseAll = Command:new("Force close all buffers", ":bufdo bd!", icons.action.kill_target),
		LYRDBufferFormat = Command:new("Format document", nil, icons.action.format, true),
		LYRDBufferJumpToLast = Command:new("Jump to last buffer", ":b#", icons.arrow.up_left),
		LYRDBufferNew = Command:new("New empty buffer", ":enew", icons.file.new),
		LYRDBufferNext = Command:new("Next buffer", ":bn", icons.chevron.double_right, false, true),
		LYRDBufferPaste = Command:new("Paste clipboard to whole buffer", ':normal! ggdG"+P', icons.action.paste),
		LYRDBufferPrev = Command:new("Previous Buffer", ":bp", icons.chevron.double_left, false, true),
		LYRDBufferSave = Command:new("Save current file", ":w", icons.action.save, false, true),
		LYRDBufferSaveAll = Command:new("Save all files", ":wall", icons.action.save_all),
		LYRDBufferSetReadOnly = Command:new("Toggle read only mode", ":setl readonly!", icons.action.toggle_on),
		LYRDBufferSplitH = Command:new("Horizonal split", ":split", icons.action.split_h),
		LYRDBufferSplitV = Command:new("Vertical split", ":vsplit", icons.action.split_v),
		LYRDBufferToggleWrap = Command:new("Toggle line wrap", ":setlocal wrap!", icons.action.wrap),
		LYRDCodeAlternateFile = Command:new("Toggle alternate file", nil, icons.file.swap),
		LYRDCodeMakeTasks = Command:new("Make tasks", nil, icons.code.make),
		LYRDCodeBuild = Command:new("Build", nil, icons.code.build),
		LYRDCodeBuildAll = Command:new("Build all", nil, icons.code.build),
		LYRDCodeAddDocumentation = Command:new("Add documentation", nil, icons.code.document),
		LYRDCodeFillStructure = Command:new("Fill structure", nil, icons.code.outline),
		LYRDCodeFixImports = Command:new("Fix imports", nil, icons.code.fix),
		LYRDCodeGenerate = Command:new("Run Generator Tool", nil, icons.code.generate),
		LYRDCodeGlobalCheck = Command:new("Global check", nil, icons.code.check),
		LYRDCodeImplementInterface = Command:new("Implement interface", nil, icons.code.interface),
		LYRDCodeInsertSnippet = Command:new("Insert snippet", nil, icons.code.snippet),
		LYRDCodeCreateSnippet = Command:new("Create snippet", nil, icons.code.snippet, true),
		LYRDCodeEditSnippet = Command:new("Edit snippet", nil, icons.code.snippet),
		LYRDCodeProduceGetter = Command:new("Generate getters code", nil, icons.code.generate),
		LYRDCodeProduceMapping = Command:new("Generate mappings code", nil, icons.code.generate),
		LYRDCodeProduceSetter = Command:new("Generate setters code", nil, icons.code.generate),
		LYRDCodeRestorePackages = Command:new("Restore packages", nil, icons.code.package),
		LYRDCodeRefactor = Command:new("Refactor", nil, icons.code.refactor),
		LYRDCodeRunSelection = Command:new("Run selection code", nil, icons.code.run, true),
		LYRDCodeRun = Command:new("Run", nil, icons.code.run),
		LYRDCodeSelectEnvironment = Command:new("Select environment", nil, icons.other.environment),
		LYRDCodeSecrets = Command:new("Edit Secrets", nil, icons.other.secret),
		LYRDDebugBreakpoint = Command:new("Toggle breakpoint", nil, icons.debug.breakpoint),
		LYRDDebugStart = Command:new("Start debug session", nil, icons.debug.play),
		LYRDDebugContinue = Command:new("Continue", nil, icons.debug.play),
		LYRDDebugStepInto = Command:new("Step into", nil, icons.debug.step_into),
		LYRDDebugStepOut = Command:new("Step out", nil, icons.debug.step_out),
		LYRDDebugStepOver = Command:new("Step over", nil, icons.debug.step_over),
		LYRDDebugStop = Command:new("Stop", nil, icons.debug.terminate),
		LYRDDebugToggleRepl = Command:new("Toggle Debug Repl", nil, icons.action.toggle_on),
		LYRDDebugToggleUI = Command:new("Debug UI", nil, icons.debug.breakpoint),
		LYRDDiagnosticLinesToggle = Command:new("Toggle diagnostic lines", nil, icons.action.toggle_on),
		LYRDGitUI = Command:new("Git UI", nil, icons.apps.git),
		LYRDGitBrowseOnWeb = Command:new("Browse line on web", nil, icons.apps.browser),
		LYRDGitCheckoutDev = Command:new("Checkout Develop branch", nil, icons.git.branch),
		LYRDGitCheckoutMain = Command:new("Checkout Main branch", nil, icons.git.branch),
		LYRDGitCommit = Command:new("Commit changes", nil, icons.git.commit),
		LYRDGitFlowFeatureFinish = Command:new("Feature finish", nil, icons.git.commit_end),
		LYRDGitFlowFeatureStart = Command:new("Feature start", nil, icons.git.commit_start),
		LYRDGitFlowFeaturePublish = Command:new("Feature publish (pull req.)", nil, icons.git.pull_request),
		LYRDGitFlowHotfixFinish = Command:new("Hotfix finish", nil, icons.git.commit_end),
		LYRDGitFlowHotfixStart = Command:new("Hotfix start", nil, icons.git.commit_start),
		LYRDGitFlowHotfixPublish = Command:new("Hotfix publish (pull req.)", nil, icons.git.pull_request),
		LYRDGitFlowInit = Command:new("Init", nil, icons.git.init),
		LYRDGitFlowReleaseFinish = Command:new("Release finish", nil, icons.git.commit_end),
		LYRDGitFlowReleaseStart = Command:new("Release start", nil, icons.git.commit_start),
		LYRDGitFlowReleasePublish = Command:new("Release publish (pull req.)", nil, icons.git.pull_request),
		LYRDGitPull = Command:new("Pull", nil, icons.git.pull),
		LYRDGitPush = Command:new("Push", nil, icons.git.push),
		LYRDGitStageAll = Command:new("Stage all", nil, icons.git.stage_all),
		LYRDGitStatus = Command:new("Status", nil, icons.git.status),
		LYRDGitViewBlame = Command:new("View blame", nil, icons.git.blame),
		LYRDGitViewCurrentFileLog = Command:new("Current file log", nil, icons.git.log),
		LYRDGitViewDiff = Command:new("View diff", nil, icons.git.diff),
		LYRDGitViewLog = Command:new("File log", nil, icons.git.log),
		LYRDGitWrite = Command:new("Write"),
		LYRDGitWorkTreeCreate = Command:new("Create Worktree", nil, icons.folder.new),
		LYRDGitWorkTreeCreateExistingBranch = Command:new("Create Worktree for existing branch", nil, icons.folder.new),
		LYRDGitWorkTreeList = Command:new("List GIT Worktrees", nil, icons.git.worktree),
		LYRDLSPToggleLens = Command:new("Toggle Code Lens", nil, icons.action.toggle_on),
		LYRDLSPFindCodeActions = Command:new("Actions", nil, icons.action.code_action),
		LYRDLSPFindDeclaration = Command:new("Go to Declaration", nil, icons.code.navigate),
		LYRDLSPFindDefinitions = Command:new("Go to Definition", nil, icons.code.navigate),
		LYRDLSPFindDocumentDiagnostics = Command:new("Find Document Diagnostics", nil, icons.diagnostic.search),
		LYRDLSPFindDocumentSymbols = Command:new("Find Document Symbols", nil, icons.code.symbol),
		LYRDLSPFindImplementations = Command:new("Find Implementations", nil, icons.code.navigate),
		LYRDLSPFindLineDiagnostics = Command:new("Find Line Diagnostics", nil, icons.diagnostic.search),
		LYRDLSPFindRangeCodeActions = Command:new("Range Actions", nil, icons.action.code_action),
		LYRDLSPFindReferences = Command:new("Find References", nil, icons.code.navigate),
		LYRDLSPFindTypeDefinition = Command:new("Go to Type Definition", nil, icons.code.navigate),
		LYRDLSPFindWorkspaceDiagnostics = Command:new("Find Workspace Diagnostics", nil, icons.diagnostic.search),
		LYRDLSPFindWorkspaceSymbols = Command:new("Find Workspace Symbols", nil, icons.code.symbol),
		LYRDLSPGotoNextDiagnostic = Command:new("Goto Next Diagnostic", nil, icons.diagnostic.next),
		LYRDLSPGotoPrevDiagnostic = Command:new("Goto Previous Diagnostic", nil, icons.diagnostic.prev),
		LYRDLSPHoverInfo = Command:new("Show hover information", nil, icons.code.hint),
		LYRDLSPRename = Command:new("Rename symbol", nil, icons.code.rename),
		LYRDLSPShowDocumentDiagnosticLocList = Command:new("Document diagnostics", nil, icons.diagnostic.search),
		LYRDLSPShowWorkspaceDiagnosticLocList = Command:new("Workspace diagnostics", nil, icons.diagnostic.search),
		LYRDLSPSignatureHelp = Command:new("Signature help", nil, icons.code.hint),
		LYRDToolManager = Command:new("Tool Manager", nil, icons.other.tools),
		LYRDPluginManager = Command:new("Plugin Manager", ":Lazy", icons.other.plug),
		LYRDPluginsClean = Command:new("Clean plugins", ":Lazy clean", icons.action.clean),
		LYRDPluginsInstall = Command:new("Install plugins", ":Lazy install", icons.action.install),
		LYRDPluginsUpdate = Command:new("Update plugins", ":Lazy sync", icons.action.update),
		LYRDSearchBufferLines = Command:new("Lines", nil, icons.search.lines),
		LYRDSearchBufferTags = Command:new("Tags", nil, icons.search.tags),
		LYRDSearchBuffers = Command:new("Search buffers", nil, icons.search.buffers),
		LYRDSearchColorSchemes = Command:new("Color Schemes", nil, icons.search.default),
		LYRDSearchCommandHistory = Command:new("Recent comands", nil, icons.search.history),
		LYRDSearchCommands = Command:new("Commands", nil, icons.search.commands),
		LYRDSearchCurrentString = Command:new("Current string in files", nil, icons.search.default),
		LYRDSearchAllFiles = Command:new("Find all files", nil, icons.search.files),
		LYRDSearchFiles = Command:new("Find files", nil, icons.search.files),
		LYRDSearchFiletypes = Command:new("Filetypes", nil, icons.search.default),
		LYRDSearchGitFiles = Command:new("Git Files", nil, icons.search.files),
		LYRDSearchHighlights = Command:new("Highlights", nil, icons.search.default),
		LYRDSearchKeyMappings = Command:new("Key Maps", nil, icons.search.keys),
		LYRDSearchLiveGrep = Command:new("Live grep", nil, icons.search.default),
		LYRDSearchQuickFixes = Command:new("Quick Fixes", nil, icons.diagnostic.search),
		LYRDSearchRecentFiles = Command:new("Recent files", nil, icons.search.history),
		LYRDSearchRegisters = Command:new("Registers", nil, icons.search.default),
		LYRDResumeLastSearch = Command:new("Resume last search", nil, icons.search.history),
		LYRDSmartCoder = Command:new("Smart code generator", nil, icons.code.generate),
		LYRDTerminalList = Command:new("View terminal list", nil, icons.search.layers),
		LYRDTerminal = Command:new("Terminal", ":terminal", icons.apps.terminal),
		LYRDTest = Command:new("Test everything", nil, icons.code.test),
		LYRDTestCoverageSummary = Command:new("View Test Coverage Summary", nil, icons.code.test),
		LYRDTestCoverage = Command:new("Toggle Test Coverage", nil, icons.code.test),
		LYRDTestFile = Command:new("Test current file", nil, icons.code.test),
		LYRDTestDebugFunc = Command:new("Debug current test function", nil, icons.debug.breakpoint),
		LYRDTestFunc = Command:new("Test current function", nil, icons.code.test),
		LYRDTestLast = Command:new("Repeat last test", nil, icons.action.repeat_once),
		LYRDTestSuite = Command:new("Test suite", nil, icons.code.test),
		LYRDTestSummary = Command:new("View test summary", nil, icons.code.test),
		LYRDTestOutput = Command:new("View test output", nil, icons.other.report),
		LYRDViewFileExplorer = Command:new("File Explorer", nil, icons.apps.file_explorer),
		LYRDViewFileExplorerAlt = Command:new("File Explorer (Alternative)", nil, icons.apps.file_explorer),
		LYRDViewFileTree = Command:new("File Tree", nil, icons.other.filetree),
		LYRDViewHomePage = Command:new("Home page", nil, icons.other.home),
		LYRDViewLocationList = Command:new("Location list"),
		LYRDViewQuickFixList = Command:new("QuickFix", ":cope"),
		LYRDViewRegisters = Command:new("Registers"),
		LYRDViewYankList = Command:new("Yank list"),
		LYRDViewFocusMode = Command:new("Focus mode", nil, icons.other.focus),
		LYRDWindowClose = Command:new("Close window", ":q"),
		LYRDWindowCloseAll = Command:new("Close all", ":qa"),
		LYRDWindowForceCloseAll = Command:new("Force Quit", ":qa!"),
		LYRDPaneNavigateLeft = Command:new("Navigate to panel left", "<C-w>h", icons.arrow.left),
		LYRDPaneNavigateDown = Command:new("Navigate to panel below", "<C-w>j", icons.arrow.down),
		LYRDPaneNavigateUp = Command:new("Navigate to panel up", "<C-w>k", icons.arrow.up),
		LYRDPaneNavigateRight = Command:new("Navigate to panel right", "<C-w>l", icons.arrow.right),
		LYRDPaneResizeLeft = Command:new("Resize to panel left", nil, icons.arrow.collapse_left),
		LYRDPaneResizeDown = Command:new("Resize to panel below", nil, icons.arrow.collapse_down),
		LYRDPaneResizeUp = Command:new("Resize to panel up", nil, icons.arrow.collapse_up),
		LYRDPaneResizeRight = Command:new("Resize to panel right", nil, icons.arrow.collapse_right),
		LYRDPaneSwapLeft = Command:new("Swap to panel left", nil, icons.arrow.expand_left),
		LYRDPaneSwapDown = Command:new("Swap to panel below", nil, icons.arrow.expand_down),
		LYRDPaneSwapUp = Command:new("Swap to panel up", nil, icons.arrow.expand_up),
		LYRDPaneSwapRight = Command:new("Swap to panel right", nil, icons.arrow.expand_right),
		LYRDDatabaseUI = Command:new("Database UI", nil, icons.other.database),
		LYRDContainersUI = Command:new("Running containers UI", nil, icons.other.docker),
		LYRDKubernetesUI = Command:new("Kubernetes UI", nil, icons.other.kubernetes),
		LYRDScratchNew = Command:new("Create a new scratch", nil, icons.file.scratch),
		LYRDScratchOpen = Command:new("Select scratch file to open", nil, icons.search.files),
		LYRDScratchSearch = Command:new("Search inside scratches", nil, icons.search.lines),
		LYRDReplace = Command:new("Search and replace in current file", nil, icons.action.replace_text),
		LYRDReplaceInFiles = Command:new("Search and replace in files", nil, icons.action.replace_in_files),
		LYRDWindowZoom = Command:new("Toggles zoom in the selected window", nil, icons.other.expand),
		LYRDApplyCurrentTheme = Command:new("Apply current theme", nil, icons.other.palette),
		LYRDApplyNextTheme = Command:new("Apply next favorite theme", nil, icons.other.palette),
		LYRDClearSearchHighlights = Command:new("Clear search highlights", ":noh", icons.other.highlighter),
		LYRDViewCodeOutline = Command:new("View code outline", nil, icons.code.outline),
		LYRDViewTreeSitterPlayground = Command:new("TreeSitter playground", nil, icons.code.parser),
		LYRDReplView = Command:new("View REPL", nil, icons.code.run),
		LYRDReplRestart = Command:new("REPL Restart", nil, icons.code.restart),
		LYRDReplNotebookRunCell = Command:new("Run notebook cell", nil, icons.code.run),
		LYRDReplNotebookRunCellAndMove = Command:new("Run notebook cell and move to the next.", nil, icons.code.run),
		LYRDReplNotebookRunAllCells = Command:new("Run all notebook cells", nil, icons.code.run),
		LYRDReplNotebookRunAllAbove = Command:new("Run notebook cells above", nil, icons.code.run),
		LYRDReplNotebookRunAllBelow = Command:new("Run notebook cells below", nil, icons.code.run),
		LYRDReplNotebookMoveCellUp = Command:new("Move current notebook cell up", nil, icons.arrow.up),
		LYRDReplNotebookMoveCellDown = Command:new("Move current notebook cell down", nil, icons.arrow.down),
		LYRDReplNotebookAddCellAbove = Command:new("Add notebook cell above", nil, icons.arrow.expand_up),
		LYRDReplNotebookAddCellBelow = Command:new("Add notebook cell below", nil, icons.arrow.expand_down),
		LYRDPasteImage = Command:new("Paste image", nil, icons.images.add),
		LYRDInsertImage = Command:new("Insert image", nil, icons.images.search),
		LYRDHardModeToggle = Command:new("Toggle hard mode", nil, icons.action.toggle_on),
	},
}

function L.settings()
	commands.register(L.cmd)
end

return L
